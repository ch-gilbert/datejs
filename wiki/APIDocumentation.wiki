#summary Date class and instance methods provided by the DateJS library.
#labels Featured

= Public Methods =

*Date.today* () : `Date`

 Gets a date that is set to the current date. The time is set to the start of the day (00:00 or 12:00 AM).
{{{
Date.today(); // Equivalent to new Date().clearTime()
}}}

*Date.getDayNumberFromName* ( `String` dayName ) : `Number`

 Gets the day number (0-6) if given a [CultureInfo culture-specific] string which is a valid full or abbreviated day name.
{{{
Date.getDayNumberFromName('Tuesday'); // 2
Date.getDayNumberFromName('sat');     // 6
}}}


*Date.getDaysInMonth* ( `Number` year, `Number` month ) : `Number`

 Gets the number of days in the month, given a year and month value. Automatically corrects for leap year.
{{{
Date.getDaysInMonth(2008, 1);  // 29
Date.getDaysInMonth(2007, 10); // 30
}}}


*Date.getMonthNumberFromName* ( `String` monthName ) : `Number`

 Gets the month number (0-11) if given a [CultureInfo culture-specific] string which is a valid full or abbreviated month name.
{{{
Date.getMonthNumberFromName('July'); // 6
Date.getMonthNumberFromName('feb');  // 1
}}}


*Date.getTimeZoneAbbreviation* ( `Number` timezoneOffset, `Boolean` isDayLightSavingsTime ) : `String`

 Returns a [CultureInfo culture-specific] timezone abbreviation based on a given offset and a boolean indicating whether daylight savings time is in effect.
{{{
}}}


*Date.getTimeZoneOffset* ( `String` timezoneName, `Boolean` isDayLightSavingsTime ) : `Number`

 Gets the timezone offset if given a [CultureInfo culture-specific] string which is a valid full or abbreviated timezone name and a boolean indicating whether daylight savings time is in effect.
{{{
}}}


*Date.isLeapYear* ( `Number` year ) : `Boolean`

 Returns true if the given year is a leap year, false otherwise.
{{{
Date.today().isLeapYear();        // true|false
new Date(2008,1,29).isLeapYear(); // true|false
}}}


*add* ( `Object` object ) : `Date`

 Adds (or subtracts) to the value of the year, month, day, hour, minute, second, millisecond of the date instance using given configuration object. Positive and Negative values allowed.
{{{
Date.today().add({ days: 5, months: 1 });
new Date().add({ years: -1, hours: -6 });
}}}


*addMilliseconds* ( `Number` milliseconds ) : `Date`

 Adds the specified number of milliseconds to this instance.
{{{
Date.today().addMilliseconds(500);
Date.today().addMilliseconds(-500);
}}}


*addSeconds* ( `Number` seconds ) : `Date`

 Adds the specified number of seconds to this instance given the number of seconds to add. The number can be positive or negative.
{{{
Date.today().addSeconds(30);
Date.today().addSeconds(-30);
}}}


*addMinutes* ( `Number` minutes ) : `Date`

 Adds the specified number of minutes to this instance given the number of minutes to add. The number can be positive or negative.
{{{
Date.today().addMinutes(45);
Date.today().addMinutes(-45);
}}}


*addHours* ( `Number` hours ) : `Date`

 Adds the specified number of hours to this instance given the number of hours to add. The number can be positive or negative.
{{{
Date.today().addHours(6);
Date.today().addHours(-6);
}}}


*addHours* ( `Number` hours ) : `Date`

  Adds the specified number of days to this instance.  The number can be positive or negative.
{{{
Date.today().addDays(1);
Date.today().addDays(-1);
}}}


*addWeeks* ( `Number` weeks ) : `Date`

 Adds the specified number of weeks to this instance given the number of weeks to add. The number can be positive or negative.
{{{
Date.today().addWeeks(1);
Date.today().addWeeks(-1);
}}}


*addMonths* ( `Number` months ) : `Date`

 Adds the specified number of months to this instance given the number of months to add. The number can be positive or negative.
{{{
Date.today().addMonths(6);
Date.today().addMonths(-6);
}}}


*addYears* ( `Number` years ) : `Date`

 Adds the specified number of years to this instance given the number of years to add. The number can be positive or negative.
{{{
Date.today().addYears(10);
Date.today().addYears(-10);
}}}


*between* ( `Date` startDate, `Date` endDate ) : `Boolean`

 Determines is this instance is between a range of two dates or equal to either the start or end dates.
{{{
var past = new Date(2000, 4, 5);
var future = new Date(2010, 11, 25)
Date.today().between(past, future); // true|false
}}}


*clearTime* (  ) : `Date`

 Resets the time of this Date object to 12:00 AM (00:00), which is the start of the day.
{{{
new Date().clearTime(); // same as Date.today()
}}}


*clone* (  ) : `Date`

 Returns a new Date object that is an exact date and time copy of the original instance.
{{{
// Wrong way
var d1 = new Date(2007, 0, 1);
var d2 = d1;
d2.add(6).days(); 

console.log(d1); // 7-Jan-2007
console.log(d2); // 7-Jan-2007

// Correct way
var d1 = new Date(2007, 0, 1);
var d2 = d1.clone();
d2.add(6).days(); 

console.log(d1); // 1-Jan-2007
console.log(d2); // 7-Jan-2007
}}}


*compareTo* ( `Date` date ) : `Number`

 Compares this instance to a Date object and return an number indication of their relative values. 1 = this is greater than date, -1 = this is less than date, 0 = values are equal.
{{{
var past = Date.today().add(-6).days();
var future = Date.today().add(6).days();

Date.today().compareTo(past);                   // -1
Date.today().compareTo(new Date().clearTime()); // 0
Date.today().compareTo(future);                 // 1
}}}


*equals* ( `Date` date ) : `Boolean`

 Compares this instance to another Date object and returns true if they are equal, false otherwise.
{{{
Date.today().compareTo(new Date().clearTime()); // true
}}}


*getDayName* ( `Boolean` useAbbreviation ) : `String`

 Gets the name of the day of the week. Set useAbbreviation to true to return the abbreviated name of the day of the week (optional).
{{{
Date.today().getDayName();     // Tuesday
Date.today().getDayName(true); // Tue
}}}


*getDayOfYear* (  ) : `Number`

 Get the numeric day number of the year, adjusted for leap year.
{{{
Date.today().getDayOfYear();         // 323
new Date(2000, 0, 1).getDayOfYear(); // 1
}}}


*getDaysInMonth* (  ) : `Boolean`

 Get the number of days in the current month, adjusted for leap year. Returns the number of days in the month.
{{{
Date.today().getDaysInMonth(); // 30
new Date(2008, 1, 15);         // 29
}}}


*getMonthName* ( `Boolean` useAbbreviation ) : `String`

 Gets the name of the month. Set useAbbreviation to true to return the abbreviated name of the month (optional).
{{{
Date.today().getMonthName();     // November
Date.today().getMonthName(true); // Nov
}}}


*getParseFunction* ( `String` formatStringOrArray ) : `Function`

 Returns a function that can be used to parse a string and return a date, given a format (string) or formats (string). The format of the string passed to the resulting function must match one of the supplied formats exactly or a parse exception will be thrown.
{{{
}}}


*getTimezone* (  ) : `String`

 Get the timezone abbreviation of the current date.
{{{
}}}


*getUTCOffset* (  ) : UTCOffset

 Get the offset from UTC of the current date. Returns the 4-character offset string prefixed with + or - (e.g. "-0500").
{{{
}}}


*getWeekOfYear* ( `Number` firstDayOfWeek ) : `Number`

 Get the week of the year for the current date instance. Takes an optional parameter for the firstDayOfWeek [0-6].
{{{
Date.today().getWeekOfYear(); // 46
}}}


*isDST* (  ) : `Boolean`

 Determine whether Daylight Saving Time (DST) is in effect.
{{{
Date.today().isDST(); // true|false
}}}


*isLeapYear* (  ) : `Boolean`

 Determines whether or not this instance is in a leap year. Returns true if this instance is in a leap year, else false.
{{{
new Date(2007, 5, 5).isLeapYear();  // false;
new Date(2008, 1, 15).isLeapYear(); // true 
}}}


*isWeekday* (  ) : `Boolean`

 Determines whether or not this instance is a weekday. Returns true if this instance is a weekday, false otherwise.
{{{
Date.today().isWeekday(); // true|false
}}}


*moveToDayOfWeek* ( `Number` dayOfWeek, `Number` pastOrFuture ) : `Date`

 Move to the next or last dayOfWeek based on the pastOrFuture value - future (+1) or past (-1). Defaults to future. [Optional].
{{{
}}}


*moveToFirstDayOfTheMonth* (  ) : `Date`

 Moves the date to the first day of the month.
{{{
new Date(2007, 10, 19).moveToFirstDayOfTheMonth(); // 1-Nov-2007
}}}


*moveToLastDayOfTheMonth* (  ) : `Date`

 Moves the date to the last day of the month.
{{{
new Date(2007, 10, 19).moveToLastDayOfTheMonth(); // 30-Nov-2007
}}}


*moveToMonth* ( `Number` monthNumber, `Number` pastOrFuture ) : `Date`

 Move to the next or previous month indicated by the monthNumber based on the pastOrFuture value - future (+1) or past (-1). Defaults to future. [Optional].
{{{
}}}


*Date.parse* ( `String` dateString ) : `Date`

 Converts the specified string value into its !JavaScript Date equivalent using [CultureInfo culture-specific] format information.
{{{
Date.parse("today")
Date.parse("t + 5 d") // today + 5 days
Date.parse("next thursday")
Date.parse("February 20th 1973″)
Date.parse("Thu, 1 July 2004 22:30:00″)
}}}


*Date.parseExact* ( `String` dateString, `String` formatStringOrArray ) : `Date`

 Converts the specified string value into its !JavaScript Date equivalent using the specified format (string) or formats (array). The format of the string value must match one of the supplied formats exactly.
{{{
Date.parseExact("6/15/2007", "M/d/yyyy");
Date.parseExact("15-Nov-2007", "d-MMM-yyyy");
Date.parseExact("4:15 PM", "h:mm tt");
}}}


*set* ( `Object` object ) : `Date`

 Set the value of year, month, day, hour, minute, second, millisecond of date instance using given configuration object.
{{{
Date.today().set({ day: 15, hour: 8 }); // Sets the day to the 15th day of the current month and the hour to 8 (AM).
}}}


*setTimezone* ( `String` timezoneAbbreviation ) : `Date`

 Set the timezone for the current date using a [CultureInfo culture-specific] timezone abbreviation (ex: 'PST'). Note that in most !JavaScript implementations, this will appear to change the time since the timezone is always based on the locale.
{{{
}}}


*setTimezoneOffset* ( `Number` timezoneOffset ) : `Date`

 Set the timezone for the current date using an offset (ex: '-0700'). Note that in most !JavaScript implementations, this will appear to change the time since the timezone is always based on the locale.
{{{
}}}


*toString* ( `String` format ) : `String`

 Converts the value of the current Date object to its equivalent string representation. Use format argument to specify format (optional). See FormatSpecifiers for more info.
{{{
Date.today().toString();           // native .toString() functionality
Date.today().toString("M/d/yyyy"); // 19-Nov-2007
new Date().toString("HH:mm");      // 18:45
}}}


*Date.validateDay* ( `Number` day, `Number` year, `Number` monthNumber ) : `Boolean`

 Validates the number is within an acceptable range for the days in a month [0-MaxDaysInMonth].
{{{
Date.validateDay(31, 2007, 10); // false
}}}


*Date.validateHour* ( `Number` hour ) : `Boolean`

 Validates the number is within an acceptable range for hours [0-23]. Returns true if within range, otherwise false.
{{{
Date.validateHour(15); // true
}}}


*Date.validateMillisecond* ( `Number` milliseconds ) : `Boolean`

 Validates the number is within an acceptable range for milliseconds [0-999]. Returns true if within range, otherwise false.
{{{
Date.validateMillisecond(500); // true
}}}


*Date.validateMinute* ( `Number` minutes ) : `Boolean`

 Validates the number is within an acceptable range for minutes [0-59]. Returns true if within range, otherwise false.
{{{
Date.validateMinute(45); // true
}}}


*Date.validateMonth* ( `Number` month ) : `Boolean`

 Validates the number is within an acceptable range for months [0-11].
{{{
Date.validateMonth(12); // false
}}}


*Date.validateSecond* ( `Number` second ) : `Boolean`

 Validates the number is within an acceptable range for seconds [0-59]. Returns true if within range, otherwise false.
{{{
Date.validateSecond(15); // true
}}}


*Date.validateYear* ( `Number` year ) : `Boolean`

 Validates the number is within an acceptable range for years [0-9999].
{{{
Date.validateYear(2007); // true
}}}